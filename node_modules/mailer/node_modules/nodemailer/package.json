{
  "name": "nodemailer",
  "description": "Easy to use module to send e-mails, supports unicode and SSL/TLS",
  "version": "0.1.20",
  "author": {
    "name": "Andris Reinman"
  },
  "maintainers": [
    {
      "name": "andris",
      "email": "andris@node.ee"
    }
  ],
  "homepage": "http://www.nodemailer.org",
  "repository": {
    "type": "git",
    "url": "http://github.com/andris9/nodemailer.git"
  },
  "main": "./lib/mail",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/andris9/nodemailer/blob/master/LICENSE"
    }
  ],
  "dependencies": {
    "mimelib-noiconv": "*"
  },
  "engine": [
    "node >=0.3.0"
  ],
  "keywords": [
    "e-mail",
    "mime",
    "email",
    "sendmail"
  ],
  "readme": "Nodemailer\n==========\n\n**Nodemailer** is an easy to use module to send e-mails with Node.JS (using SMTP or sendmail) and it's Unicode friendly - You can use any characters you like ✔\n\nNodemailer supports\n-------------------\n\n  - *Unicode* to use any characters\n  - *HTML content* as well as plain text alternative\n  - *Attachments*\n  - *Embedded images* in HTML\n  - *SSL/TLS* for secure e-mail delivery\n\nInstallation\n------------\n\nInstall through *NPM*\n\n    npm install nodemailer\n\nor download [ZIP archive](https://github.com/andris9/Nodemailer/zipball/master).\n\nThe source for Nodemailer is available at [GitHub](https://github.com/andris9/Nodemailer).\n\nUsage\n-----\n\n**nodemailer.send_mail(mail_params, callback)**\n\nWhere\n\n  * **mail_params** defines the e-mail (set its subject, body text, receivers etc.), see *E-mail Message Fields* for details\n  * **callback** is the callback function that will be run after the e-mail is sent or the sending failed\n\nSimple use case to send a HTML e-mail with plaintext alternative\n\n    var nodemailer = require('nodemailer');\n\n    // one time action to set up SMTP information\n    nodemailer.SMTP = {\n        host: 'smtp.example.com'\n    }\n\n    // send an e-mail\n    nodemailer.send_mail(\n        // e-mail options\n        {\n            sender: 'me@example.com',\n            to:'you@example.com',\n            subject:'Hello!',\n            html: '<p><b>Hi,</b> how are you doing?</p>',\n            body:'Hi, how are you doing?'\n        },\n        // callback function\n        function(error, success){\n            console.log('Message ' + success ? 'sent' : 'failed');\n        }\n    );\n\nThe callback function gets two parameters - *error* and *success*. If there's an \nerror, then sending failed and you should check where's the problem. If there's \nno error value but *success* is not *true* then the server wasn't able to process \nthe message correctly. Probably there was timeout while processing the message \netc - in this case you should re-schedule sending this e-mail. If *success* \nis *true* then the message was sent successfully.\n\nSee [examples/example.js](https://github.com/andris9/Nodemailer/blob/master/examples/example.js) for a complete example.\n\nSMTP Setup\n----------\n\nBefore sending any e-mails you need to set up SMTP server parameters.\n\n    nodemailer.SMTP = {\n        host: 'smtp.example.com', // required\n        port: 25, // optional, defaults to 25 or 465\n        use_authentication: false, // optional, false by default\n        user: '', // used only when use_authentication is true \n        pass: ''  // used only when use_authentication is true\n    }\n\n### 'sendmail' alternative\n\nAlternatively if you don't want to use SMTP but the `sendmail` command then\nset property *sendmail* to true (or as the path to *sendmail* if the command is not in default path).\n\n    nodemailer.sendmail = true;\n\nor\n\n    nodemailer.sendmail = '/path/to/sendmail';\n\nIf *sendmail* is set, then SMTP options are discarded.\n\n### SSL Support (port 465)\n\nIf you want to use SSL (not TLS/STARTTLS, just SSL), you need to set the *ssl* parameter to true.\n\n\tnodemailer.SMTP = {\n\t    host: 'smtp.gmail.com',\n\t    port: 465,\n\t    ssl: true,\n\t    use_authentication: true,\n\t    user: 'my.username@gmail.com',\n\t    pass: 'my.password'\n\t}\n\n### TLS Support (port 587)\n\nIf you want to use TLS/STARTTLS (port 587), leave *ssl* to false or do not set it, encryption will be started automatically when needed.\n\n    nodemailer.SMTP = {\n        host: 'smtp.gmail.com',\n        port: 587,\n        ssl: false,\n        use_authentication: true,\n        user: 'my.username@gmail.com',\n        pass: 'my.password'\n    }\n\nE-mail Message Fields\n--------------------\n\nThe following are the possible fields of an e-mail message:\n\n  - **sender** - The e-mail address of the sender. All e-mail addresses can be plain `sender@server.com` or formatted `Sender Name <sender@server.com>`\n  - **to** - Comma separated list of recipients e-mail addresses that will appear on the `To:` field\n  - **cc** - Comma separated list of recipients e-mail addresses that will appear on the `Cc:` field\n  - **bcc** - Comma separated list of recipients e-mail addresses that will appear on the `Bcc:` field\n  - **reply_to** - An e-mail address that will appear on the `Reply-To:` field\n  - **subject** - The subject of the e-mail\n  - **body** - The plaintext version of the message\n  - **html** - The HTML version of the message\n  - **attachments** - An array of attachment objects. Attachment object consists of two properties - `filename` and `contents`. Property `contents` can either be a String or a Buffer (for binary data). `filename` is the name of the attachment.\n\nThere's an optional extra field **headers** which holds custom header values in the form of `{key: value}`. These values will not overwrite any existing header but will be appended to the list.\n\n    mail_data = {\n        sender:'me@example.com',\n        to:'you@example.com',\n        ....\n        headers: {\n            'X-My-Custom-Header-Value': 'Visit www.example.com for more info!'\n        }\n    }\n\nFor debugging set **debug** to true - then all the data passed between the client and the server will be output to console.\n\nAddress Formatting\n------------------\n\nAll the e-mail addresses can be plain e-mail address\n\n    username@example.com\n\nor with formatted name (includes unicode support)\n\n    'Ноде Майлер' <username@example.com>\n\nTo, Cc and Bcc fields accept comma separated list of e-mails. Formatting can be mixed.\n\n    username@example.com, 'Ноде Майлер' <username@example.com>, User Name <username@example.com>\n\nCurrently you can't use comma in a formatted name, even if the name is in quotes.\n\n\nCreating HTML messages\n----------------------\n\nMessage body in HTML format can be set with the message field `html`. If property `html` has contents but plain text alternative `body` has not (is left to empty), then existing text from the html version is also used in the plaintext version (without the html formatting).\n\nThe charset for `html` is UTF-8.\n\n    nodemailer.send_mail({\n        ...\n        html: '<p>hello world!<br/>хелло ворлд!</p>'\n    });\n\nUsing Attachments\n-----------------\n\nAn e-mail message can include one or several attachments. Attachments can be set with the message field `attachments` which accepts a list of attachment objects.\n\nAn attachment object primarly consists of two properties - `filename` which is the name of the file (not a filepath to an actual file on disk etc.) that will be reported to the receiver as the attachments name; and `contents` to hold the data in a String or Buffer format.\nThere's an additional property `cid`  which can be used for embedding images in a HTML message.\n\nProperty `filename` is unicode safe.\n\n    var attachment_list = [\n        {\n            'filename': 'attachment1.txt',\n            'contents': 'contents for attachment1.txt'\n        },\n        {\n            'filename': 'аттачмент2.bin',\n            'contents': new Buffer('binary contents', 'binary');\n        }\n    ];\n\n    nodemailer.send_mail({\n        ...\n        attachments: attachment_list\n    });\n\nUsing Embedded Images\n---------------------\n\nAttachments can be used as embedded images in the HTML body. To use this feature, you need to set additional property\nof the attachment - `cid` (unique identifier of the file) which is a reference to the attachment file.\nThe same `cid` value must be used as the image URL in HTML (using `cid:` as the URL protocol, see example below).\n\n**NB!** the cid value should be as unique as possible!\n\n    var cid_value = Date.now() + '.image.jpg';\n    var html = 'Embedded image: <img src=\"cid:' + cid_value + '\" />';\n    var attachments = [{\n        filename: 'image.png',\n        contents: IMAGE_CONTENTS,\n        cid: cid_value\n    }];\n\nIssues\n------\n\nUse [Nodemailer Issue tracker](https://github.com/andris9/Nodemailer/issues) to report additional shortcomings, bugs, feature requests etc.\n\n### Charsets\n\nCurrently the only allowed charset is UTF-8.\n\n### Attachments\n\nDo not use large attachments as the attachment contents are read into memory and the final message body is combined into one large string before sending.\n\nContributors\n------------\n\nSee [Nodemailer/contributors](https://github.com/andris9/Nodemailer/contributors) for a live list\n\nLicense\n-------\n\n**Nodemailer** is licensed under [MIT license](https://github.com/andris9/Nodemailer/blob/master/LICENSE). Basically you can do whatever you want to with it.\n",
  "_id": "nodemailer@0.1.20",
  "dist": {
    "shasum": "112beba854348737ce1aa744176cebc80eb6b60e"
  },
  "_from": "nodemailer@0.1.20"
}
