{
  "name": "static",
  "version": "0.4.7",
  "description": "Generate static sites with Markdown, Handlebars and Stylus. Live previews with socket.io.",
  "author": {
    "name": "Ryan Eastridge",
    "email": "ryan@syntacticx.com",
    "url": "http://syntacticx.com"
  },
  "repository": {
    "type": "git",
    "web": "http://github.com/walmartlabs/static",
    "url": "git://github.com/walmartlabs/static.git"
  },
  "bin": {
    "static": "bin/static"
  },
  "files": [
    "bin",
    "docs",
    "lib",
    "LICENSE",
    "package.json",
    "README.md",
    "static.js"
  ],
  "main": "static.js",
  "license": "MIT",
  "homepage": "http://walmartlabs.github.com/static",
  "dependencies": {
    "optimist": "*",
    "handlebars": "~1.0",
    "jsdom": "0.2.10",
    "stylus": "*",
    "express": "*",
    "underscore": "*",
    "markdown": "*",
    "wrench": "*",
    "watch": "0.5.0",
    "socket.io": "*"
  },
  "devDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "# Static\n\n## Overview\n \nGenerate static sites with [Markdown](http://daringfireball.net/projects/markdown/), [Handlebars](http://www.handlebarsjs.com/) and [Stylus](http://learnboost.github.com/stylus/). Live previews with [socket.io](http://socket.io/).\n\n    npm install -g static\n    static create test\n\nThis bootstraps a static project inside of a folder named \"test\". You can then use the *static* command to watch this source folder and publish the generated site to an arbitrary number of target folders. Specify a port number to start an express server which will trigger automatic page reloads when files inside the source directory change.\n\n    static ./test ./test-generated 8000    \n\nThis page is generated with Static, [view the source here](https://github.com/walmartlabs/static/tree/master/docs).\n\n### Github Pages\n\nTo use static with [GitHub Pages](http://pages.github.com/) create a new static project in a directory named *docs* inside your repo, and a *gh-pages* branch in separate directory locally.\n\n    # create a docs folder containing a new static project\n    cd repo\n    static create docs\n    git add docs\n    git commit -m \"added docs\"\n    git push origin master\n    cd ..\n\n    # create a gh-pages branch containing the generated site\n    static ./repo/docs ./repo-gh-pages 8000\n    cd repo-gh-pages\n    git symbolic-ref HEAD refs/heads/gh-pages\n    git remote add origin git@github.com:username/repo.git\n    git add *\n    git commit -m \"added generated docs\"\n    git push origin gh-pages\n    \nView your changes locally on port 8000 and when you're happy with the changes commit and push the *gh-pages* branches to GitHub.\n\n## Project Structure\n\n### Assets\n\nPut any media files such as images, movies, etc in here. They will be copied to the *assets* folder in the generated site as is.\n\n### Includes\n\nAny files in this directory can be included into your pages using the *include* helper, specifying the file extension is not necessary. If the include is a handlebars file, you can pass arbitrary key, value pairs.\n\n    {{include \"header\" key=\"value\"}}\n    <p>Content</p>\n    {{include \"footer\"}}\n\n### Pages\n\nAny *.html*, *.md* or *.handlebars* files here will be processed, have their extension changed to *.html*, and will be copied to the root folder of your generated site, for example: *source/pages/index.handlebars* -> *target/index.html*\n\n### Scripts\n\nJavascript files, will be copied to the *scripts* folder of the generated site as is. You can include all scripts or a single script inside a handlebars template with one of the helpers:\n\n    {{script src}}\n    {{scripts}}\n\n### Styles\n\nStylus or CSS files, will be processed and copied to the *styles* folder of the generated site. You can include all stylesheets or a single stylesheet inside a handlebars template with one of the helpers. You can pass arbitrary HTML attributes to either helper.\n\n    {{style href}}\n    {{styles media=\"screen\"}}\n\n### package.json\n\nAny keys specified here will be available inside of your handlebars templates.\n\n### index.js\n\nMost of the behaviors described so far are all specified in [index.js](https://github.com/walmartlabs/static/blob/bootstrap/index.js). You can specify additional behaviors or modify the output of your pages with jQuery by modifying this file. *index.js*  must export a single function which will receive a *static* object.\n\n    module.exports = function(static) {\n      static.file('index.handlebars', function(file) {\n        file.$(function(window) {\n          //add extra emphasis to all em tags\n          window.$('em').each(function() {\n            this.innerHTML += '!';\n          });\n        });\n      });\n    }\n\nThe rest of the documentation details the API available inside of a *index.js*.\n\n## Static\n\n### file *static.file(pattern, callback)*\n\nSelect files in the source project to modify or copy. *pattern* can be a relative path as a string or a regular expression. Callback will be called for each matching file with the file object as it's only argument. This example from the *index.js* plugin selects markdown files in any directory:\n\n    static.file(/\\.(md|markdown)$/, function(file) {\n      file.transform('markdown');\n      file.changeExtensionTo('html');\n    });\n\n### helper *static.helper(key, callback)*\n\nRegister a new handlebars helper. The callback will recieve the current file object, any ordered arguments passed followed by an an options hash (accessed via *options.hash*) if any attributes were passed to the helper.\n\n    static.helper('bold', function(file, content, options) {\n      return '<b>' + content + '</b>';\n    }); \n\n    {{bold \"Text\"}}\n\n### path *static.path*\n\nPath to the source project.\n\n### package *static.package*\n\nParsed *package.json*\n\n## File\n\n### write *file.write(target_path)*\n\nWrite the file to a given path in the generated site. *target_path* should be relative and only a directory name. This example from *index.js* copies all asset files:\n\n    static.file(/^assets\\//, function(file) {\n      file.write('assets');\n    });\n\n### $ *file.$(callback)*\n\nLoads jQuery then calls callback with a DOM window object representing the current file and a *next* function that must be called. The DOM tree will then be serialized back to a string after callback is called. The table of contents for this document is created by scanning all h1, h2 and h3 tags then injecting HTML into the DOM.\n\n    static.file('index.handlebars', function(file) {\n      file.$(function(window, next) {\n        window.$ === window.jQuery;\n        next();\n      });\n    });\n\nThe callback is called after the file has been processed with Markdown and Handlebars.\n\n### set *file.set(key, value)*\n\nSets a value to be made available in all handlebar templates rendered by the file (the file itself + includes).\n\n### render *file.render(filename [,context])*\n\nRender a Markdown or Handlebars file, returning the contents as a string. *filename* is a relative path in the source directory, *context* is the context that will be available if the file is handlebars template.\n\n    var output = file.render('test.handlebars', {key: 'value'});\n\n### transform *file.transform(callback)*\n\nTransform a file, currently availble transforms are *handlebars*, *markdown* and *stylus*.\n\n    static.file(/\\.styl$/, function(file) {\n      file.transform('stylus');\n      file.changeExtensionTo('css');\n    });\n\nArbitrary transforms can be supplied by passing a callback that receives the buffer of the file and a callback to call when the transformation is complete:\n\n    static.file(/\\.txt$/, function(file) {\n      file.transform(function(buffer, next) {\n        next(buffer.toLowerCase());\n      });\n    });\n\n### changeExtensionTo *file.changeExtensionTo(extension)*\n\nChange the extension of the file when it is written to a target. Does not modify the extension of the source file.\n\n## Helpers\n\n### live-reload *{{live-reload}}*\n\nPut this inside of your <head> tag. Generates the JavaScript needed for live reload functionality. The *styles*, *style*, *scripts* and *script* helpers should all be used when using live-reload instead of plain HTML as it will ensure that the current page reloads when dependent stylesheets or scripts change.\n\n### set *{{set key=\"value\"}}*\n\nSet a value in the current file that will be made available to any other handlebars templates the current file includes.\n\n### include *{{include filename [key=\"value\"]}}*\n\nInclude another handlebars, markdown or html file inside of the *includes* directory. Arbitrary values can be passed to the file if it is a handlebars template.\n\n### styles *{{styles [key=\"value\"]}}*\n\nGenerate style tags for all stylesheets inside of the *styles* folder. Arbitrary HTML attributes can be passed.\n\n### style *{{style [key=\"value\"]}}*\n\nGenerate a style tag for a single stylesheet.\n\n### scripts *{{scripts [key=\"value\"]}}*\n\nGenerate script tags for all scripts inside of the *scripts* folder. Arbitrary HTML attributes can be passed.\n\n### script *{{script [key=\"value\"]}}*\n\nGenerate a script tag for a single script.\n\n### root *{{root}}*\n\nPath to the root of the site from the current page.\n\n### target *{{target}}*\n\nThe current filename that is being written.\n\n## Recipes\n\n### Page Templates\n\nThe default project assumes each page will *include* a header and a footer. You could instead insert the content of each page into a template:\n\n    static.file(/^pages\\//, function(file) {\n      file.write('.');\n      file.transform(function(buffer, next) {\n        next(file.render('templates/index.handlebars', {\n          yield: buffer\n        }));\n      });\n    });\n\nInside of templates/index.handlebars:\n\n    <html>\n      <body>\n        {{{yield}}}\n      </body>\n    </html>\n\n",
  "_id": "static@0.4.7",
  "dist": {
    "shasum": "52ebe0c654c867c4a73f00b5803ca7e62cdf174d"
  },
  "_from": "static"
}
